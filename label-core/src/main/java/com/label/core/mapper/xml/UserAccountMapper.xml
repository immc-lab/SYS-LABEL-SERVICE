<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.label.core.mapper.UserAccountMapper">
    <insert id="userRegister">
        insert into
           tb_user (user_account,user_password,`name`,user_id)
        values
            (#{user_account},#{user_password},#{name},#{user_id})

    </insert>
    <insert id="saveNewUser">
         insert into
         tb_user
         (roles,user_account,
          user_password,`name`,
          manage_team_key,
          belong_team_key,
          user_key,
          belong_team_name,
          manage_team_name,
          roles_name,
          createTime)
         values
         (#{roles},
          #{req.account},
          #{req.password},
          #{req.username},
          #{manageTeam},
          #{belongTeam},
          #{user_key},
          #{belongTeamName},
          #{manageTeamName},
          #{rolesName},
          #{createTime})

    </insert>
    <update id="addManagerKey">
          UPDATE tb_user
          SET manage_team_key = IFNULL(CONCAT(IFNULL(manage_team_key,''), ',',#{teamKey}), #{teamKey})
          WHERE user_key = #{userKey};
    </update>
    <update id="updateUser">
        update tb_user
        set
            user_account = #{req.account},
            user_password = CASE
                WHEN #{req.password} IS NOT NULL AND #{req.password} != '' THEN #{req.password}
                ELSE user_password
            END,
            `name` = #{req.username},
            manage_team_key = #{manageTeam},
            roles = #{roles},
            belong_team_key = #{belongTeam},
            belong_team_name = #{belongTeamName},
            manage_team_name = #{manageTeamName},
            roles_name = #{rolesName}
        where
            user_key = #{req.user_key}




    </update>
    <update id="updateUserLoginMessage">
        update
        tb_user
        set
        lastLoginTime = #{lastLoginTime},
        ip = #{ip}
        where
        user_key = #{userKey}




    </update>
    <update id="disableAccount">
        update
        tb_user
        set
        state = #{state}
        where
        user_key = #{userKey}


    </update>
    <update id="removeManagerKey">
        UPDATE tb_user
        SET manage_team_key = CASE WHEN manage_team_key IS NULL THEN NULL ELSE REPLACE(manage_team_key, #{teamKey}, '') END
        WHERE user_key = #{userKey};
    </update>

    <select id="searchUser" resultType="com.label.core.pojo.entity.UserAccount">
        select
            user_password,name
        from
            tb_user
        where user_account = #{user_account}
    </select>
    <select id="userLogin" resultType="com.label.core.pojo.entity.UserAccount">
        select
            *
        from
            tb_user
        where
              user_account = #{user_account}
        and
              user_password = #{user_password}


    </select>
    <select id="getCurrentUserMessage" resultType="com.label.core.pojo.entity.CurrentUserMessage">
        select
            *
        from
            tb_user
        where
            user_key = #{user_key}
    </select>
    <select id="duplicateCheck" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM tb_user
        WHERE
        user_account = #{account}
    </select>
    <select id="getAllUser" resultType="com.label.core.pojo.vo.admin.UserItem">
        select
        *
        from
        tb_user
    </select>
    <select id="getAllManager" resultType="com.label.core.pojo.vo.admin.ManagerItem">
        select
        user_account,user_key,`name`
        from
        tb_user
        where
        FIND_IN_SET('2',roles) > 0
        and state ='1'
    </select>
    <select id="getAllUserByTeamKey" resultType="com.label.core.pojo.vo.admin.UserItem">
        select
        *
        from
        tb_user
        where FIND_IN_SET(#{teamKey},belong_team_key) > 0
    </select>
</mapper>
